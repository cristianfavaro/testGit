Anotações-Git


### como iniciar o repositorio 

git init
git add .

git commit -m "First commit"


git log --oneline  #mostra as linhas de commit para eu poder recuperar os códigos


#copia o link do repositorio


$ git remote add origin "remote repository URL" ### no aspas
# Define o novo remote
$ git remote -v
# Verifica a nova URL remota


$ git push -u origin master
# Faz push das alterações no seu repositório local até o repositório remote especificado como a origem


##### trabalhando com branches 

git branch feature-1 #criar esse branche para trabalhar com uma funcionalidade específica do projeto. 


git branch -a
# listando todos os branches

  feature-1
* master  ## quer dizer que eu estou nesse branch
  remotes/origin/master


git checkout feature-1
#aqui eu mudo a ferramenta para esse novo lugar.

git branch -a #agora vai mostrar que o outro arquivo é que vale

####começando a trabalhar na nova ferramenta 

#vamos mudar um arquivo. Criei um chamado feature.js com qualquer coisa

git status #a mudança aparece. 


git add .

git status # aparece verde

git commit -m "added new feature"

git checkout master 
#aqui eu volto para a master. Veja que assim ele some com o arquivo do javascript. SUPER LEGAL!


#### apagar a branch

git branch -d feature-1 

#aqui ele manda a mensgem de que a branch não está totalmente merged 

git branch -D feature-1 

# aqui ele apaga mesmo sem ter dado certo.


#trabalhando com dois branches ao mesmo tempo 

git checkout -b feature-a
#aqui ele criou a branche e mudou para ele de uma vez

#criei o arquivo novo de js para testar


git checkout master 
#volto para o master para criar a terceira 

git checkout -b feature-b
#criei o outro arquivo js

#dei o add e o commit para mandar para a branch b


git branch -a

#todos os braches estão aqui. separados.


======= Merging branches 

#temos de ir para o perfil que queremos
#temos de estar na barnch que vamos fazer o merge. nesse caso o master


git checkout master


git merge feature-a
#escolhi a primeira para fazer o merge. 


git merge feature-b
#aqui ele deu merge by the recursive strategy
#porque o segundo não tem o a, mas agora vai ter os dois. 

====== Conflitos

git checkout -b feature-c
#criamos um novo
#criei o css dentro do master para testar o problema

#addicionei e fiz o commit 

#agora eu testei dentro do feature c e joguei o css com um padding

git merge feature-c

#deu um conflito. tenho dois arquivos com conflito 
#eu apenas tenho de ir no arquivo e arrumar o conflito de fusão que ele apontou

#depois

git add . 

git commit #não preciso passar o comentário porque é merge. ele depois vai abrir uma tela preta escura que posso ignorar. 

git log --oneline
# agora tudo está certo. 



####### desfazer coisas 

git log --oneline
#vou precisar desses para ver os commits que eu fiz 



checkout commit #mais seguro

#ele mostra como estava em outro momento

revert commit 
#ele reverte as mudanças. vai colocar um x no commit como se ele não tivesse acontecido
#não apaga. mas como se tivesse apagado

reset commit # mais perigoso 
#ele vai permanentemnete te levar para o momento em que esse commit não existia. 



checkout commit #mais seguro

git checkout -b numeroDoCommit

git checkout master 
#para voltar 


git revert NumeroDoCommit 

#não precisamos mudar nada na tela preta. 
# a diferenca é que ele remove um commit adicionando um outro commit. 


git reset 
#ele volta para um ponto específico. destruindo todas as mudanças que você fez de lá em diante

#ele joga o commit para dentro do editor. mas apaga o commit do historico.
#git 

git reset Numero --hard
#aqui ele apaga tudo. 

